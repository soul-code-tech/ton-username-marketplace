import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∫–æ—à–µ–ª—ë–∫ –∏–∑ Secrets (–≤ Replit)
BOT_TOKEN = os.getenv("BOT_TOKEN")
WALLET_ADDRESS = os.getenv("WALLET_ADDRESS")

if not BOT_TOKEN or not WALLET_ADDRESS:
    logging.error("‚ùå BOT_TOKEN –∏–ª–∏ WALLET_ADDRESS –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ Secrets!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–ª—è MVP)
temp_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å username", callback_data="get_username")],
        [InlineKeyboardButton(text="üí∞ –ú–æ–∏ –ª–æ—Ç—ã", callback_data="my_listings")],
        [InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
    ])
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å Username‚Äô–æ–≤!\n\n"
        "–ü–æ–ª—É—á–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username —á–µ—Ä–µ–∑ @fragment ‚Üí –≤—ã—Å—Ç–∞–≤—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ‚Üí –∑–∞—Ä–∞–±–æ—Ç–∞–π TON!",
        reply_markup=keyboard
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ username (–≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äî –∑–∞–≥–ª—É—à–∫–∞)
@dp.callback_query(lambda c: c.data == "get_username")
async def get_username(callback_query: types.CallbackQuery):
    fake_username = "x7kq"  # –ü–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∏–∑ @fragment
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", callback_data=f"list_{fake_username}")]
    ])
    await callback_query.message.answer(
        f"üéâ –¢–µ–±–µ –¥–æ—Å—Ç–∞–ª—Å—è username: @{fake_username}\n\n"
        f"–•–æ—á–µ—à—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É?",
        reply_markup=keyboard
    )

# –ù–∞—á–∞–ª–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
@dp.callback_query(lambda c: c.data.startswith("list_"))
async def list_username(callback_query: types.CallbackQuery):
    username = callback_query.data.split("_")[1]
    await callback_query.message.answer(f"üí∞ –í–≤–µ–¥–∏ —Ü–µ–Ω—É –¥–ª—è @{username} –≤ TON (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5):")
    temp_data[callback_query.from_user.id] = {'username': username}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã
@dp.message(lambda message: message.from_user.id in temp_data)
async def set_price(message: types.Message):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
        user_data = temp_data.pop(message.from_user.id)
        username = user_data['username']
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º ‚Äî –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await message.answer(f"‚úÖ @{username} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {price} TON! (–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5)")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
